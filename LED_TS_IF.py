# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'LED_TS_IF.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import time
import board
import neopixel


# On CircuitPlayground Express, and boards with built in status NeoPixel -> board.NEOPIXEL
# Otherwise choose an open pin connected to the Data In of the NeoPixel strip, i.e. board.D1
# pixel_pin = board.NEOPIXEL

# On a Raspberry pi, use this instead, not all pins are supported
pixel_pin = board.D18

# The number of NeoPixels
num_pixels = 100

# The order of the pixel colors - RGB or GRB. Some NeoPixels have red and green reversed!
# For RGBW NeoPixels, simply change the ORDER to RGBW or GRBW.
ORDER = neopixel.GRB

pixels = neopixel.NeoPixel(
    pixel_pin, num_pixels, brightness=0.25, auto_write=False, pixel_order=ORDER
)
RED = (255, 0, 0)
GREEN = (0, 255, 0)
BLUE = (0, 0, 255)
YELLOW = (255, 255, 0)
CYAN = (0, 255, 255)
PURPLE = (255, 0, 255)


def wheel(pos):
    # Input a value 0 to 255 to get a color value.
    # The colours are a transition r - g - b - back to r.
    if pos < 0 or pos > 255:
        r = g = b = 0
    elif pos < 85:
        r = int(pos * 3)
        g = int(255 - pos * 3)
        b = 0
    elif pos < 170:
        pos -= 85
        r = int(255 - pos * 3)
        g = 0
        b = int(pos * 3)
    else:
        pos -= 170
        r = 0
        g = int(pos * 3)
        b = int(255 - pos * 3)
    return (r, g, b) if ORDER in (neopixel.RGB, neopixel.GRB) else (r, g, b, 0)


def rainbow_cycle(wait):
    for j in range(255):
        for i in range(num_pixels):
            pixel_index = (i * 256 // num_pixels) + j
            pixels[i] = wheel(pixel_index & 255)
        pixels.show()
        time.sleep(wait)
        
        

class Ui_MainWindow(object):    
    def setupUi(self, MainWindow):        
        MainWindow.setObjectName("MainWindow")
        MainWindow.setEnabled(True)
        MainWindow.resize(1024, 600)
        MainWindow.setDocumentMode(False)
        MainWindow.setUnifiedTitleAndToolBarOnMac(False)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setGeometry(QtCore.QRect(0, 0, 1024, 600))
        self.tabWidget.setObjectName("tabWidget")
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.btn_00 = QtWidgets.QPushButton(self.tab)
        self.btn_00.setGeometry(QtCore.QRect(20, 50, 121, 71))
        self.btn_00.setCheckable(True)
        self.btn_00.setObjectName("btn_00")
        self.btn_01 = QtWidgets.QPushButton(self.tab)
        self.btn_01.setGeometry(QtCore.QRect(20, 130, 121, 71))
        self.btn_01.setCheckable(True)
        self.btn_01.setObjectName("btn_01")
        self.btn_02 = QtWidgets.QPushButton(self.tab)
        self.btn_02.setGeometry(QtCore.QRect(20, 210, 121, 71))
        self.btn_02.setCheckable(True)
        self.btn_02.setObjectName("btn_02")
        self.btn_03 = QtWidgets.QPushButton(self.tab)
        self.btn_03.setGeometry(QtCore.QRect(160, 90, 121, 71))
        self.btn_03.setCheckable(True)
        self.btn_03.setObjectName("btn_03")
        self.btn_04 = QtWidgets.QPushButton(self.tab)
        self.btn_04.setGeometry(QtCore.QRect(160, 170, 121, 71))
        self.btn_04.setCheckable(True)
        self.btn_04.setObjectName("btn_04")
        self.btn_05 = QtWidgets.QPushButton(self.tab)
        self.btn_05.setGeometry(QtCore.QRect(300, 140, 121, 71))
        self.btn_05.setCheckable(True)
        self.btn_05.setObjectName("btn_05")
        self.btn_06 = QtWidgets.QPushButton(self.tab)
        self.btn_06.setGeometry(QtCore.QRect(500, 350, 121, 71))
        self.btn_06.setCheckable(True)
        self.btn_06.setObjectName("btn_06")
        self.tabWidget.addTab(self.tab, "")
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        self.tabWidget.addTab(self.tab_2, "")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.btn_06.clicked.connect(self.RainbowClicked)
        self.btn_00.clicked.connect(self.RedPick)
        self.btn_01.clicked.connect(self.GreenPick)
        self.btn_02.clicked.connect(self.BluePick)
        self.btn_03.clicked.connect(self.YellowPick)
        self.btn_04.clicked.connect(self.CyanPick)
        self.btn_05.clicked.connect(self.PurplePick)
    
    def RedPick(self):
        if self.btn_00.isChecked():            
            pixels.fill(RED)
            pixels.show()
        else:
            pixels.fill((0, 0, 0))
            pixels.show()

    def GreenPick(self):
        if self.btn_01.isChecked():            
            pixels.fill(GREEN)
            pixels.show()
        else:
            pixels.fill((0, 0, 0))
            pixels.show()

    def BluePick(self):
        if self.btn_02.isChecked():            
            pixels.fill(BLUE)
            pixels.show()
        else:
            pixels.fill((0, 0, 0))
            pixels.show()

    def YellowPick(self):
        if self.btn_03.isChecked():            
            pixels.fill(YELLOW)
            pixels.show()
        else:
            pixels.fill((0, 0, 0))
            pixels.show()

    def CyanPick(self):
        if self.btn_04.isChecked():            
            pixels.fill(CYAN)
            pixels.show()
        else:
            pixels.fill((0, 0, 0))
            pixels.show()

    def PurplePick(self):
        if self.btn_05.isChecked():            
            pixels.fill(PURPLE)
            pixels.show()
        else:
            pixels.fill((0, 0, 0))
            pixels.show()

    def RainbowClicked(self):
        if self.btn_06.isChecked():            
            rainbow_cycle(0.001)  # rainbow cycle with 1ms delay per step
        else:
            pixels.fill((0, 0, 0, 0))
            pixels.show()
            
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.btn_00.setText(_translate("MainWindow", "Red"))
        self.btn_01.setText(_translate("MainWindow", "Green"))
        self.btn_02.setText(_translate("MainWindow", "Blue"))
        self.btn_03.setText(_translate("MainWindow", "Yellow"))
        self.btn_04.setText(_translate("MainWindow", "Cyan"))
        self.btn_05.setText(_translate("MainWindow", "Purple"))
        self.btn_06.setText(_translate("MainWindow", "Rainbow"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate("MainWindow", "Tab 1"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), _translate("MainWindow", "Tab 2"))

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
